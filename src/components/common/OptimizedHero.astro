---
import { decode } from 'blurhash';

interface Props {
  title?: string;
  description?: string;
  backgroundImage: string;
  className?: string;
  blurhash?: string;
}

const { 
  title, 
  description, 
  backgroundImage,
  className = "",
  blurhash = "L6PZfSi_.AyE_3t7t7R**0o#DgR4"
} = Astro.props;

// Don't generate blurhash on the server
// We'll handle this entirely on the client side
---

<section 
  class={`relative h-[600px] md:h-[500px] flex items-center ${className}`}
>
  <!-- Blurhash background -->
  <div 
    style="position: absolute; inset: 0; background-size: cover; background-position: center; transition-property: opacity; transition-duration: 500ms;"
    data-blurhash={blurhash}
  >
  </div>

  <!-- Actual background image (loaded after interaction) -->
  <div 
    class="absolute inset-0 bg-cover bg-center opacity-0 transition-opacity duration-500"
    data-bg-image={backgroundImage}
  >
  </div>

  <!-- Overlay -->
  <div class="absolute inset-0 bg-gradient-to-b from-gray-900/70 to-gray-900/90"></div>

  <!-- Content -->
  <div style="position: relative; max-width: 80rem; margin-left: auto; margin-right: auto; padding-left: 1rem; padding-right: 1rem; padding-top: 4rem; padding-bottom: 4rem; color: white;">
    {title && (
      <h1 style="font-size: 2.25rem; margin-bottom: 1.5rem; font-weight: 700; line-height: 1.25; @media (min-width: 768px) { font-size: 3rem; } @media (min-width: 1024px) { font-size: 3.75rem; }">
        {title}
      </h1>
    )}
    {description && (
      <p style="font-size: 1.25rem; color: rgb(229, 231, 235); max-width: 42rem;">
        {description}
      </p>
    )}
    <slot />
  </div>
</section>

<script>
  import { decode } from 'blurhash';

  // Function to convert blurhash to data URL
  async function blurhashToDataURL(hash: string) {
    try {
      const pixels = decode(hash, 32, 32);
      const canvas = document.createElement('canvas');
      canvas.width = 32;
      canvas.height = 32;
      const ctx = canvas.getContext('2d');
      if (!ctx) return null;
      
      const imageData = ctx.createImageData(32, 32);
      imageData.data.set(pixels);
      ctx.putImageData(imageData, 0, 0);
      return canvas.toDataURL('image/jpeg');
    } catch (error) {
      console.error('Error generating blurhash:', error);
      return null;
    }
  }

  // Initialize blurhash backgrounds immediately
  document.querySelectorAll('[data-blurhash]').forEach(async element => {
    const hash = element.getAttribute('data-blurhash');
    if (hash) {
      const dataURL = await blurhashToDataURL(hash);
      if (dataURL) {
        (element as HTMLElement).style.backgroundImage = `url(${dataURL})`;
      }
    }
  });

  // Load hero images on interaction
  let hasInteracted = false;
  const loadImages = () => {
    if (hasInteracted) return;
    hasInteracted = true;
    
    const bgElements = document.querySelectorAll('[data-bg-image]');
    bgElements.forEach(element => {
      const bgImage = element.getAttribute('data-bg-image');
      if (bgImage) {
        // Ensure the image path starts with a forward slash
        const imagePath = bgImage.startsWith('/') ? bgImage : `/${bgImage}`;
        
        const img = new Image();
        img.onload = () => {
          (element as HTMLElement).style.backgroundImage = `url(${imagePath})`;
          (element as HTMLElement).style.opacity = '1';
          // Fade out blurhash
          const blurhashEl = element.previousElementSibling;
          if (blurhashEl) {
            (blurhashEl as HTMLElement).style.opacity = '0';
          }
        };
        img.src = imagePath;
      }
    });
  };

  // Add event listeners for user interaction
  ['mousemove', 'scroll', 'touchstart'].forEach(event => {
    window.addEventListener(event, loadImages, { once: true });
  });

  // Fallback: Load images after 3 seconds if no interaction
  setTimeout(loadImages, 3000);
</script> 